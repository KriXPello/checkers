{"version":3,"file":"backend.js","mappings":"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","sources":["webpack://backend/./app.ts","webpack://backend/./entities/index.ts","webpack://backend/./entities/room-lobby.ts","webpack://backend/./entities/room.ts","webpack://backend/./entities/rooms-manager.ts","webpack://backend/./entities/user.ts","webpack://backend/./entities/users-manager.ts","webpack://backend/./handlers/check-token.ts","webpack://backend/./handlers/create-room.ts","webpack://backend/./handlers/get-rooms.ts","webpack://backend/./handlers/index.ts","webpack://backend/./handlers/join-room.ts","webpack://backend/./handlers/leave-room.ts","webpack://backend/./handlers/log-in.ts","webpack://backend/./handlers/make-step.ts","webpack://backend/./handlers/swap-players.ts","webpack://backend/./schemas/from-client.ts","webpack://backend/./schemas/index.ts","webpack://backend/./services/broadcast-room-full-info.ts","webpack://backend/./services/broadcast.ts","webpack://backend/./services/index.ts","webpack://backend/./services/websocket-communicator.ts","webpack://backend/../shared/constants/directions.ts","webpack://backend/../shared/constants/index.ts","webpack://backend/../shared/constants/opposite-sides.ts","webpack://backend/../shared/entities/game.ts","webpack://backend/../shared/entities/index.ts","webpack://backend/../shared/entities/tables/basic-table.ts","webpack://backend/../shared/entities/tables/index.ts","webpack://backend/../shared/entities/unit.ts","webpack://backend/../shared/entities/units-controller.ts","webpack://backend/../shared/interfaces/game.ts","webpack://backend/../shared/interfaces/helpers.ts","webpack://backend/../shared/interfaces/index.ts","webpack://backend/../shared/interfaces/messages/client-server.ts","webpack://backend/../shared/interfaces/messages/from-server.ts","webpack://backend/../shared/interfaces/messages/index.ts","webpack://backend/../shared/interfaces/room.ts","webpack://backend/../shared/interfaces/step.ts","webpack://backend/../shared/interfaces/table-grid.ts","webpack://backend/../shared/interfaces/table.ts","webpack://backend/../shared/interfaces/unit.ts","webpack://backend/../shared/interfaces/user.ts","webpack://backend/../shared/utils/generate-initial-units.ts","webpack://backend/../shared/utils/get-unique-string.ts","webpack://backend/../shared/utils/index.ts","webpack://backend/../shared/utils/log-error.ts","webpack://backend/../shared/utils/object-set.ts","webpack://backend/../shared/utils/position-utils.ts","webpack://backend/external commonjs \"cors\"","webpack://backend/external commonjs \"express\"","webpack://backend/external commonjs \"joi\"","webpack://backend/external commonjs \"ws\"","webpack://backend/webpack/bootstrap","webpack://backend/webpack/runtime/compat get default export","webpack://backend/webpack/runtime/define property getters","webpack://backend/webpack/runtime/hasOwnProperty shorthand","webpack://backend/./index.ts"],"sourcesContent":["import { logError } from '#utils';\r\nimport { ClientMessageType, IClientMessage } from '#interfaces';\r\n\r\nimport { UsersManager } from './entities';\r\nimport { handlersMap } from './handlers';\r\n\r\nconst allowedMessageTypes = Object.values(ClientMessageType);\r\n\r\nexport const handleMessage = async (\r\n  message: IClientMessage,\r\n  token: string = '',\r\n): Promise<Object | number> => {\r\n  const { type } = message;\r\n\r\n  const typeAllowed = allowedMessageTypes.includes(type);\r\n  if (!typeAllowed) {\r\n    console.log('handle message: тип не разрешён', type);\r\n    return 400;\r\n  }\r\n\r\n  const handler = handlersMap[type];\r\n\r\n  try {\r\n    const messageData = message.data;\r\n\r\n    if (message.type === ClientMessageType.CheckToken) {\r\n      message.data;\r\n    }\r\n\r\n    const validationResult = handler.schema.validate(messageData);\r\n\r\n    if (validationResult.error) {\r\n      logError('validation error', validationResult.error);\r\n      return 400;\r\n    }\r\n\r\n    if (handler.noAuth) {\r\n      const result = await handler.callback({ messageData });\r\n      return result;\r\n    } else {\r\n      const sender = UsersManager.find(token);\r\n\r\n      if (!sender) {\r\n        return 401;\r\n      }\r\n\r\n      const result = await handler.callback({\r\n        messageData,\r\n        sender,\r\n      });\r\n\r\n      return result;\r\n    }\r\n  } catch (err) {\r\n    logError('message handler:', err);\r\n    return 500;\r\n  }\r\n};\r\n","export * from './user';\r\nexport * from './room';\r\nexport * from './users-manager';\r\nexport * from './rooms-manager';\r\n","import { GameSide, IActors } from '#interfaces';\r\nimport { User } from './user';\r\n\r\ninterface LobbyData {\r\n  creator: User,\r\n  password: string | null | undefined,\r\n}\r\n\r\nexport class RoomLobby {\r\n  private players: Record<GameSide, User | null>;\r\n  private password: string | null;\r\n\r\n  constructor(data: LobbyData) {\r\n    const { creator, password } = data;\r\n\r\n    this.players = {\r\n      [GameSide.Top]: creator,\r\n      [GameSide.Bottom]: null,\r\n    };\r\n    this.password = password || null;\r\n  }\r\n\r\n  public get isSecured(): boolean {\r\n    return !!this.password;\r\n  }\r\n\r\n  public get playersList(): User[] {\r\n    const { top, bottom } = this.players;\r\n    const list = [];\r\n    if (top) list.push(top);\r\n    if (bottom) list.push(bottom);\r\n\r\n    return list;\r\n  }\r\n\r\n  public get actors(): IActors {\r\n    const { bottom, top } = this.players;\r\n    return {\r\n      [GameSide.Top]: top?.serialize() ?? null,\r\n      [GameSide.Bottom]: bottom?.serialize() ?? null,\r\n    };\r\n  }\r\n\r\n  public get hasPlace(): boolean {\r\n    const { bottom, top } = this.players;\r\n    return !(bottom && top);\r\n  }\r\n\r\n  public hasPlayer(userId: string): boolean {\r\n    const { top, bottom } = this.players;\r\n\r\n    return top?.id == userId || bottom?.id == userId;\r\n  }\r\n\r\n  public addPlayer(user: User, password: string | undefined): boolean {\r\n    if (!this.hasPlace || this.hasPlayer(user.id) || !this.checkPassword(password)) {\r\n      return false;\r\n    }\r\n\r\n    for (const key in this.players) {\r\n      const side = key as GameSide;\r\n\r\n      if (this.players[side] == null) {\r\n        this.players[side] = user;\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public removeUser(id: string): boolean {\r\n    for (const key in this.players) {\r\n      const side = key as GameSide;\r\n\r\n      const player = this.players[side];\r\n      if (player?.id == id) {\r\n        this.players[side] = null;\r\n\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  public swapUsers() {\r\n    const { bottom, top } = this.players;\r\n    this.players = {\r\n      bottom: top,\r\n      top: bottom,\r\n    };\r\n  }\r\n\r\n  public checkPassword(password: string | undefined): boolean {\r\n    const noPassword = !this.password;\r\n    const passwordValid = password === this.password;\r\n    return noPassword || passwordValid;\r\n  }\r\n}\r\n","import { IGameConfig, IMove, IRoomBaseInfo, IRoomFullInfo, IRoomShortInfo, IUser, TableType } from '#interfaces';\r\nimport { getUniqueString } from '#utils';\r\nimport { Game } from '#entities';\r\nimport { RoomLobby } from './room-lobby';\r\nimport { User } from './user';\r\n\r\ninterface ConstructorData {\r\n  title: string,\r\n  password: string | null | undefined,\r\n  creator: User,\r\n}\r\n\r\nexport class Room {\r\n  public readonly id: string;\r\n  public title: string;\r\n  public readonly creator: User;\r\n  public readonly lobby: RoomLobby;\r\n\r\n  private savedConfig: IGameConfig;\r\n  private game: Game;\r\n\r\n  constructor(data: ConstructorData) {\r\n    const { title, password, creator } = data;\r\n\r\n    this.id = getUniqueString();\r\n    this.title = title;\r\n    this.creator = creator;\r\n    this.lobby = new RoomLobby({ creator, password });\r\n\r\n    // TODO: Возможность выбирать настройки\r\n    const config: IGameConfig = {\r\n      tableType: TableType.Basic,\r\n      multipleAttacks: true,\r\n      mustBeat: true,\r\n    };\r\n\r\n    this.savedConfig = config;\r\n    this.game = Game.createNew({ config });\r\n  }\r\n\r\n  public makeStep(initiator: User, move: IMove): boolean {\r\n    const gameAlreadyFinished = !!this.game.winnerSide;\r\n    if (gameAlreadyFinished) {\r\n      return false;\r\n    }\r\n\r\n    const isPlayer = this.lobby.hasPlayer(initiator.id);\r\n    if (!isPlayer) {\r\n      return false;\r\n    }\r\n\r\n    const activeActor = this.lobby.actors[this.game.turnOf];\r\n    const isActiveActor = activeActor && activeActor.id === initiator.id;\r\n    if (!isActiveActor) {\r\n      return false;\r\n    }\r\n\r\n    const unitMoveResult = this.game.moveUnit(move);\r\n\r\n    return unitMoveResult;\r\n  }\r\n\r\n  public restartGame() {\r\n    const { savedConfig } = this;\r\n    this.game = Game.createNew({ config: savedConfig });\r\n  };\r\n\r\n  public get winner(): IUser | null {\r\n    const { game, lobby } = this;\r\n    const { winnerSide } = game;\r\n    const { actors } = lobby;\r\n    return winnerSide && actors[winnerSide];\r\n  }\r\n\r\n  public get shortInfo(): IRoomShortInfo {\r\n    const { baseInfo } = this;\r\n    const { playersList } = this.lobby;\r\n\r\n    return {\r\n      ...baseInfo,\r\n      playersCount: playersList.length,\r\n    };\r\n  }\r\n\r\n  public get fullInfo(): IRoomFullInfo {\r\n    const { baseInfo, game, creator, lobby } = this;\r\n    const { actors } = lobby;\r\n\r\n    const gameSnapshot = game.snapshot();\r\n\r\n    return {\r\n      ...baseInfo,\r\n      creatorId: creator.id,\r\n      actors,\r\n      gameSnapshot,\r\n    };\r\n  }\r\n\r\n  private get baseInfo(): IRoomBaseInfo {\r\n    const { id, title } = this;\r\n    const { isSecured } = this.lobby;\r\n    return { id, title, isSecured };\r\n  }\r\n}\r\n","import { ObjectSet } from '#utils';\r\nimport { ServerMessageType } from '#interfaces';\r\nimport { Room } from './room';\r\nimport { broadcastService } from '../services';\r\n\r\nexport namespace RoomsManager {\r\n  const roomsSet = new ObjectSet<Room>([]);\r\n\r\n  export const getList = () => roomsSet.elements;\r\n  export const getShortInfoList = () => roomsSet.elements.map(room => room.shortInfo);\r\n\r\n  export const find = (id: string) => roomsSet.find(id);\r\n\r\n  export const findRoomWithUser = (userId: string) => {\r\n    const room = roomsSet.elements.find((room) => room.lobby.hasPlayer(userId));\r\n\r\n    return room;\r\n  };\r\n\r\n  export const addRoom = (room: Room) => {\r\n    roomsSet.insert(room);\r\n  };\r\n\r\n  export const removeRoomWithNotify = async (id: string) => {\r\n    const removedRoom = roomsSet.remove(id);\r\n\r\n    if (!removedRoom) {\r\n      return;\r\n    }\r\n\r\n    await broadcastService({\r\n      users: removedRoom.lobby.playersList,\r\n      message: {\r\n        type: ServerMessageType.RoomDeleted,\r\n        data: {\r\n          roomId: removedRoom.id,\r\n        }\r\n      }\r\n    });\r\n  };\r\n}\r\n","import { IServerMessage, IUser } from '#interfaces';\r\nimport { ICommunicator } from '../interfaces';\r\n\r\ninterface ConstructorData {\r\n  id: string,\r\n  token: string,\r\n  name: string,\r\n  communicator: ICommunicator | null,\r\n}\r\n\r\nconst mockCommunicator: ICommunicator = {\r\n  closeConnection: () => { },\r\n  send: async (message) => {\r\n    return {\r\n      success: true,\r\n      message,\r\n      receiverId: '',\r\n    };\r\n  }\r\n};\r\n\r\nexport class User {\r\n  public readonly id: string;\r\n  public readonly token: string;\r\n  public name: string;\r\n\r\n  private communicator: ICommunicator;\r\n\r\n  constructor(data: ConstructorData) {\r\n    const { id, token, name, communicator } = data;\r\n\r\n    this.id = id;\r\n    this.token = token;\r\n    this.name = name;\r\n    this.communicator = communicator ?? mockCommunicator;\r\n  }\r\n\r\n  public get wasConnected() {\r\n    return this.communicator != mockCommunicator;\r\n  }\r\n\r\n  public changeCommunicator(newCommunicator: ICommunicator) {\r\n    this.communicator.closeConnection();\r\n    this.communicator = newCommunicator;\r\n  }\r\n\r\n  public serialize(): IUser {\r\n    const { id, name } = this;\r\n\r\n    return { id, name };\r\n  }\r\n\r\n  public async sendMessage(message: IServerMessage) {\r\n    return this.communicator.send(message);\r\n  }\r\n}\r\n","import { User } from './user';\r\n\r\nexport namespace UsersManager {\r\n  const usersMap = new Map<string, User>();\r\n\r\n  export const getList = () => Array.from(usersMap.values());\r\n\r\n  export const find = (token: string): User | null => {\r\n    return usersMap.get(token) ?? null;\r\n  };\r\n\r\n  export const add = (user: User) => {\r\n    usersMap.set(user.token, user);\r\n  };\r\n\r\n  export const remove = (token: string) => {\r\n    usersMap.delete(token);\r\n  };\r\n}\r\n","import { ClientMessageType } from '#interfaces';\r\n\r\nimport { clientSchemas } from '../schemas';\r\n\r\nimport { Handler } from '../interfaces';\r\nimport { RoomsManager, UsersManager } from '../entities';\r\n\r\nexport const checkToken: Handler<ClientMessageType.CheckToken> = {\r\n  noAuth: true,\r\n  schema: clientSchemas.checkToken,\r\n  callback: async ({ messageData }) => {\r\n    const { token } = messageData;\r\n\r\n    const user = UsersManager.find(token);\r\n\r\n    if (!user) {\r\n      return {\r\n        valid: false,\r\n      };\r\n    }\r\n\r\n    const activeRoom = RoomsManager.findRoomWithUser(user.id);\r\n\r\n    return {\r\n      valid: true,\r\n      ...user.serialize(),\r\n      activeRoom: activeRoom?.fullInfo,\r\n    };\r\n  },\r\n};\r\n","import { ClientMessageType } from '#interfaces';\r\n\r\nimport { clientSchemas } from '../schemas';\r\n\r\nimport { Room, RoomsManager } from '../entities';\r\nimport { Handler } from '../interfaces';\r\n\r\nexport const createRoom: Handler<ClientMessageType.CreateRoom> = {\r\n  schema: clientSchemas.createRoom,\r\n  callback: async ({ messageData, sender }) => {\r\n    const { title, password } = messageData;\r\n\r\n    const room = new Room({\r\n      creator: sender,\r\n      title,\r\n      password,\r\n    });\r\n\r\n    RoomsManager.addRoom(room);\r\n\r\n    return {\r\n      roomInfo: room.fullInfo,\r\n    };\r\n  },\r\n};\r\n","import { ClientMessageType } from '#interfaces';\r\n\r\nimport { clientSchemas } from '../schemas';\r\n\r\nimport { RoomsManager } from '../entities';\r\nimport { Handler } from '../interfaces';\r\n\r\nexport const getRooms: Handler<ClientMessageType.GetRooms> = {\r\n  schema: clientSchemas.getRooms,\r\n  callback: async () => {\r\n    const rooms = RoomsManager.getShortInfoList();\r\n\r\n    return {\r\n      rooms,\r\n    };\r\n  },\r\n};\r\n","import { ClientMessageType } from '#interfaces';\r\n\r\nimport { checkToken } from './check-token';\r\nimport { createRoom } from './create-room';\r\nimport { getRooms } from './get-rooms';\r\nimport { joinRoom } from './join-room';\r\nimport { leaveRoom } from './leave-room';\r\nimport { logIn } from './log-in';\r\nimport { makeStep } from './make-step';\r\nimport { swapPlayers } from './swap-players';\r\n\r\nimport { Handler } from '../interfaces';\r\n\r\nexport const handlersMap: Record<ClientMessageType, Handler<any>> = {\r\n  [ClientMessageType.CheckToken]: checkToken,\r\n  [ClientMessageType.CreateRoom]: createRoom,\r\n  [ClientMessageType.GetRooms]: getRooms,\r\n  [ClientMessageType.JoinRoom]: joinRoom,\r\n  [ClientMessageType.LeaveRoom]: leaveRoom,\r\n  [ClientMessageType.LogIn]: logIn,\r\n  [ClientMessageType.MakeStep]: makeStep,\r\n  [ClientMessageType.SwapPlayers]: swapPlayers,\r\n};\r\n","import { ClientMessageType } from '#interfaces';\r\n\r\nimport { clientSchemas } from '../schemas';\r\nimport { broadcastRoomFullInfo } from '../services';\r\n\r\nimport { RoomsManager } from '../entities';\r\nimport { Handler } from '../interfaces';\r\n\r\nexport const joinRoom: Handler<ClientMessageType.JoinRoom> = {\r\n  schema: clientSchemas.joinRoom,\r\n  callback: async ({ messageData, sender }) => {\r\n    const { roomId, password } = messageData;\r\n\r\n    const room = RoomsManager.find(roomId);\r\n    if (!room) {\r\n      return {\r\n        joined: false,\r\n        reason: 'Комната не найдена',\r\n      };\r\n    }\r\n\r\n    const { lobby } = room;\r\n\r\n    if (!lobby.checkPassword(password)) {\r\n      return {\r\n        joined: false,\r\n        reason: 'Неправильный пароль',\r\n      };\r\n    }\r\n\r\n    if (!lobby.hasPlace) {\r\n      return {\r\n        joined: false,\r\n        reason: 'Комната заполнена',\r\n      };\r\n    }\r\n\r\n    if (lobby.hasPlayer(sender.id)) {\r\n      return {\r\n        joined: false,\r\n        reason: 'Вы уже в этой комнате',\r\n      };\r\n    }\r\n\r\n    const joined = lobby.addPlayer(sender, password);\r\n\r\n    if (!joined) {\r\n      return {\r\n        joined: false,\r\n        reason: 'Непредвиденная ошибка',\r\n      };\r\n    }\r\n\r\n    const { playersList } = lobby;\r\n\r\n    await broadcastRoomFullInfo(room, playersList);\r\n\r\n    return {\r\n      joined: true,\r\n      roomInfo: room.fullInfo,\r\n    };\r\n  },\r\n};\r\n","import { ClientMessageType } from '#interfaces';\r\n\r\nimport { clientSchemas } from '../schemas';\r\nimport { broadcastRoomFullInfo } from '../services';\r\n\r\nimport { RoomsManager } from '../entities';\r\nimport { Handler } from '../interfaces';\r\n\r\nexport const leaveRoom: Handler<ClientMessageType.LeaveRoom> = {\r\n  schema: clientSchemas.leaveRoom,\r\n  callback: async ({ messageData, sender }) => {\r\n    const { roomId } = messageData;\r\n\r\n    const room = RoomsManager.find(roomId);\r\n    if (!room) {\r\n      return {\r\n        leaved: false,\r\n      };\r\n    }\r\n\r\n    const { lobby } = room;\r\n\r\n    const leaved = lobby.removeUser(sender.id);\r\n\r\n    if (!leaved) {\r\n      return { leaved: false };\r\n    }\r\n\r\n    if (sender.id === room.creator.id) {\r\n      await RoomsManager.removeRoomWithNotify(room.id);\r\n    } else {\r\n      await broadcastRoomFullInfo(room, lobby.playersList);\r\n    }\r\n\r\n    return {\r\n      leaved: true,\r\n    };\r\n  },\r\n};\r\n","import { ClientMessageType } from '#interfaces';\r\nimport { getUniqueString } from '#utils';\r\n\r\nimport { clientSchemas } from '../schemas';\r\n\r\nimport { Handler } from '../interfaces';\r\nimport { User, UsersManager } from '../entities';\r\n\r\nexport const logIn: Handler<ClientMessageType.LogIn> = {\r\n  noAuth: true,\r\n  schema: clientSchemas.logIn,\r\n  callback: async ({ messageData }) => {\r\n    const id = getUniqueString();\r\n    const token = getUniqueString();\r\n    const { name } = messageData;\r\n\r\n    const user = new User({\r\n      id,\r\n      token,\r\n      name,\r\n      communicator: null,\r\n    });\r\n\r\n    UsersManager.add(user);\r\n\r\n    // Если пользователь не подключился за указанное время, удаляем его\r\n    setTimeout(() => {\r\n      if (!user.wasConnected) {\r\n        UsersManager.remove(token);\r\n      }\r\n    }, 30 * 1000);\r\n\r\n    return {\r\n      id,\r\n      token,\r\n      name,\r\n    };\r\n  },\r\n};\r\n","import { ClientMessageType, ServerMessageType } from '#interfaces';\r\n\r\nimport { clientSchemas } from '../schemas';\r\n\r\nimport { RoomsManager } from '../entities';\r\nimport { Handler } from '../interfaces';\r\nimport { broadcastRoomFullInfo, broadcastService } from '../services';\r\n\r\nexport const makeStep: Handler<ClientMessageType.MakeStep> = {\r\n  schema: clientSchemas.makeStep,\r\n  callback: async ({ messageData, sender }) => {\r\n    const { roomId, move } = messageData;\r\n\r\n    const room = RoomsManager.find(roomId);\r\n    if (!room) {\r\n      return { success: false };\r\n    }\r\n\r\n    const successStep = room.makeStep(sender, move);\r\n\r\n    if (!successStep) {\r\n      return { success: false };\r\n    }\r\n\r\n    const { playersList } = room.lobby;\r\n\r\n    await broadcastRoomFullInfo(room, playersList);\r\n\r\n    const { winner } = room;\r\n\r\n    if (winner) {\r\n      await broadcastService({\r\n        users: playersList,\r\n        message: {\r\n          type: ServerMessageType.GameOver,\r\n          data: {\r\n            roomId: room.id,\r\n            winner,\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      success: true,\r\n    };\r\n  },\r\n};\r\n","import { ClientMessageType } from '#interfaces';\r\n\r\nimport { clientSchemas } from '../schemas';\r\nimport { broadcastRoomFullInfo } from '../services';\r\n\r\nimport { RoomsManager } from '../entities';\r\nimport { Handler } from '../interfaces';\r\n\r\nexport const swapPlayers: Handler<ClientMessageType.SwapPlayers> = {\r\n  schema: clientSchemas.swapPlayers,\r\n  callback: async ({ messageData, sender }) => {\r\n    const { roomId } = messageData;\r\n\r\n    const room = RoomsManager.find(roomId);\r\n    if (!room) {\r\n      return { swapped: false };\r\n    }\r\n\r\n    if (room.creator.id != sender.id) {\r\n      return { swapped: false };\r\n    }\r\n\r\n    const { lobby } = room;\r\n\r\n    lobby.swapUsers();\r\n\r\n    await broadcastRoomFullInfo(room, lobby.playersList);\r\n\r\n    return { swapped: true };\r\n  },\r\n};\r\n","import joi from 'joi';\r\n\r\nimport { IClientMessageData, IMove } from '#interfaces';\r\n\r\nconst requiredString = joi.string().min(1).required();\r\nconst password = joi.string().allow('');\r\n\r\nexport const checkToken = joi.object<IClientMessageData.CheckToken>({\r\n  token: requiredString,\r\n});\r\n\r\nexport const createRoom = joi.object<IClientMessageData.CreateRoom>({\r\n  title: joi\r\n    .string()\r\n    .min(1)\r\n    .required(),\r\n\r\n  password,\r\n});\r\n\r\nexport const getRooms = joi.object<IClientMessageData.GetRooms>({});\r\n\r\nexport const joinRoom = joi.object<IClientMessageData.JoinRoom>({\r\n  roomId: requiredString,\r\n\r\n  password,\r\n});\r\n\r\nexport const leaveRoom = joi.object<IClientMessageData.LeaveRoom>({\r\n  roomId: requiredString,\r\n});\r\n\r\nexport const logIn = joi.object<IClientMessageData.LogIn>({\r\n  name: requiredString,\r\n});\r\n\r\n// [number, number]\r\nconst position = joi\r\n  .array()\r\n  .items(joi.number().required(), joi.number().required())\r\n  .required();\r\n\r\nconst move = joi.object<IMove>({\r\n  from: position,\r\n  to: position,\r\n});\r\n\r\nexport const makeStep = joi.object<IClientMessageData.MakeStep>({\r\n  roomId: requiredString,\r\n  move,\r\n});\r\n\r\nexport const swapPlayers = joi.object<IClientMessageData.SwapPlayers>({\r\n  roomId: requiredString,\r\n});\r\n","export * as clientSchemas from './from-client';\r\n","import { ServerMessageType } from '#interfaces';\r\nimport { Room, User } from '../entities';\r\nimport { broadcastService } from './broadcast';\r\n\r\n\r\nexport const broadcastRoomFullInfo = (room: Room, users: User[]) => {\r\n  return broadcastService({\r\n    users,\r\n    message: {\r\n      type: ServerMessageType.RoomData,\r\n      data: {\r\n        roomFullInfo: room.fullInfo,\r\n      }\r\n    }\r\n  });\r\n};\r\n","import { IServerMessage } from '#interfaces';\r\nimport { User } from '../entities';\r\n\r\ninterface Params {\r\n  users: User[],\r\n  message: IServerMessage,\r\n}\r\n\r\nexport const broadcastService = async ({\r\n  users,\r\n  message,\r\n}: Params) => {\r\n  const promises = users.map(user => user.sendMessage(message));\r\n\r\n  const results = await Promise.all(promises);\r\n\r\n  const notSentMessages = results.filter(result => !result.success);\r\n\r\n  return {\r\n    notSentMessages,\r\n  };\r\n};\r\n","export * from './broadcast-room-full-info';\r\nexport * from './broadcast';\r\nexport * from './websocket-communicator';\r\n","import ws from 'ws';\r\n\r\nimport { IServerMessage, IUser } from '#interfaces';\r\nimport { ICommunicator, ISentMessage } from '../interfaces';\r\n\r\ninterface ConstructorData {\r\n  socket: ws.WebSocket,\r\n  receiverId: IUser['id'],\r\n}\r\n\r\nexport class WebsocketCommunicator implements ICommunicator {\r\n  private socket: ws.WebSocket;\r\n  private receiverId: IUser['id'];\r\n\r\n  constructor(data: ConstructorData) {\r\n    const { socket, receiverId } = data;\r\n    this.socket = socket;\r\n    this.receiverId = receiverId;\r\n  }\r\n\r\n  public closeConnection(): void {\r\n    this.socket.terminate();\r\n  }\r\n\r\n  public send(message: IServerMessage): Promise<ISentMessage> {\r\n    return new Promise<ISentMessage>((resolve) => {\r\n      const { receiverId } = this;\r\n\r\n      const sentMessage: ISentMessage = {\r\n        receiverId,\r\n        message,\r\n        success: true,\r\n      };\r\n\r\n      const messageJson = JSON.stringify(message);\r\n\r\n      this.socket.send(messageJson, (err) => {\r\n        if (err) {\r\n          console.error('User.send:', err.message);\r\n          resolve({\r\n            ...sentMessage,\r\n            success: false,\r\n          });\r\n        };\r\n\r\n        resolve(sentMessage);\r\n      });\r\n    });\r\n  }\r\n}\r\n","export const top = [0, -1];\r\nexport const topLeft = [-1, -1];\r\nexport const topRight = [1, -1];\r\nexport const bottom = [0, 1];\r\nexport const bottomLeft = [-1, 1];\r\nexport const bottomRight = [1, 1];\r\n\r\nexport const diagonalArr = [\r\n  topLeft,\r\n  topRight,\r\n  bottomRight,\r\n  bottomLeft,\r\n];\r\n","export * as directions from './directions';\r\nexport * from './opposite-sides';\r\n","import { GameSide } from '#interfaces';\r\n\r\nexport const oppositeSides: Record<GameSide, GameSide> = {\r\n  [GameSide.Bottom]: GameSide.Top,\r\n  [GameSide.Top]: GameSide.Bottom,\r\n};\r\n","import { oppositeSides } from '#constants';\r\nimport { GameSide, IAllowedStepsMap, IGameConfig, IGameSnapshot, IMove, IStep, ITable, IUnit, StepType } from '#interfaces';\r\nimport { generateInitialUnits, samePos } from '#utils';\r\nimport { createTable } from './tables';\r\nimport { Unit } from './unit';\r\nimport { UnitsController } from './units-controller';\r\n\r\ntype ConstructorData = {\r\n  config: IGameConfig,\r\n  turnOf: GameSide,\r\n  table: ITable,\r\n  units: IUnit[],\r\n  lockedUnit?: IUnit,\r\n};\r\n\r\ntype CreateData = {\r\n  config: IGameConfig;\r\n};\r\n\r\nexport class Game {\r\n  private _winnerSide: GameSide | null = null;\r\n  public get winnerSide() { return this._winnerSide; }\r\n\r\n  private _turnOf: GameSide;\r\n  public get turnOf(): GameSide { return this._turnOf; }\r\n\r\n  private config: IGameConfig;\r\n  /**\r\n   * Ставится если включены множественные атаки и после\r\n   * хода-атаки у юнита есть доступные ходы-атаки.\r\n   */\r\n  private lockedUnit?: Unit;\r\n\r\n  private table: ITable;\r\n  private unitsController: UnitsController;\r\n\r\n  private constructor(data: ConstructorData) {\r\n    const { config, turnOf, table, units, lockedUnit } = data;\r\n\r\n    this.config = config;\r\n    this._turnOf = turnOf;\r\n    this.table = table;\r\n    this.unitsController = new UnitsController(units);\r\n    this.lockedUnit = lockedUnit && new Unit(lockedUnit);\r\n  }\r\n\r\n  public static createNew(data: CreateData): Game {\r\n    const { config } = data;\r\n    const table = createTable(config.tableType);\r\n    const units = generateInitialUnits(table);\r\n\r\n    return new Game({\r\n      config,\r\n      turnOf: GameSide.Bottom,\r\n      table,\r\n      units,\r\n    });\r\n  }\r\n\r\n  public static load(snapshot: IGameSnapshot): Game {\r\n    const { config, turnOf, units, lockedUnit } = snapshot;\r\n    const table = createTable(config.tableType);\r\n\r\n    return new Game({\r\n      config,\r\n      turnOf,\r\n      table,\r\n      units,\r\n      lockedUnit,\r\n    });\r\n  }\r\n\r\n  public snapshot(): IGameSnapshot {\r\n    const { config, turnOf, unitsController, lockedUnit } = this;\r\n    const units = unitsController.list();\r\n    return {\r\n      config,\r\n      turnOf,\r\n      units,\r\n      lockedUnit,\r\n    };\r\n  }\r\n\r\n  public findAvailableSteps(side: GameSide = this.turnOf): IAllowedStepsMap {\r\n    const { lockedUnit, config } = this;\r\n\r\n    if (config.multipleAttacks && lockedUnit) {\r\n      // Ищем ходы только для lockedUnit'a.\r\n      // Поиск ходов для другой стороны не должен ограничиваться этим юнитом\r\n      if (lockedUnit.side === side) {\r\n        return {\r\n          [lockedUnit.id]: this.findAttackSteps(lockedUnit),\r\n        };\r\n      }\r\n    }\r\n\r\n    const unitsOfSide = this.unitsController.list(side);\r\n\r\n    // Составляем список доступных атак для юнитов\r\n    const attackStepsMap: IAllowedStepsMap = {};\r\n    unitsOfSide.forEach((unit) => {\r\n      const attackSteps = this.findAttackSteps(unit);\r\n      const hasAttackSteps = attackSteps.length > 0;\r\n\r\n      if (hasAttackSteps) {\r\n        attackStepsMap[unit.id] = attackSteps;\r\n      }\r\n    });\r\n\r\n    const someUnitCanAttack = Object.values(attackStepsMap).length > 0;\r\n\r\n    if (config.mustBeat && someUnitCanAttack) {\r\n      return attackStepsMap;\r\n    } else {\r\n      // Добавляем доступные перемещения к найденным ранее атакам.\r\n      // Если доступных атак не было, просто ставим доступные перемещения\r\n      const allStepsMap: IAllowedStepsMap = { ...attackStepsMap };\r\n      unitsOfSide.forEach((unit) => {\r\n        const moveSteps = this.findMoveSteps(unit);\r\n        const hasMoveSteps = moveSteps.length > 0;\r\n\r\n        if (hasMoveSteps) {\r\n          const existingSteps = allStepsMap[unit.id] ?? [];\r\n          allStepsMap[unit.id] = existingSteps.concat(moveSteps);\r\n        }\r\n      });\r\n\r\n      return allStepsMap;\r\n    }\r\n  }\r\n\r\n  public moveUnit(move: IMove): boolean {\r\n    const { from, to } = move;\r\n\r\n    const destinationOutside = this.table.isOutside(to);\r\n    if (destinationOutside) {\r\n      return false;\r\n    }\r\n\r\n    const selectedUnit = this.unitsController.unitOn(from);\r\n    if (!selectedUnit) {\r\n      return false;\r\n    }\r\n\r\n    const invalidSide = selectedUnit.side !== this.turnOf;\r\n    if (invalidSide) {\r\n      return false;\r\n    }\r\n\r\n    const availableStepsMap = this.findAvailableSteps(selectedUnit.side);\r\n    const availableStepsOfUnit = availableStepsMap[selectedUnit.id];\r\n    if (!availableStepsOfUnit.length) {\r\n      return false;\r\n    }\r\n\r\n    const selectedStep = availableStepsOfUnit\r\n      .find(step => samePos(step.destination, to));\r\n\r\n    const stepUnavailable = !selectedStep;\r\n    if (stepUnavailable) {\r\n      return false;\r\n    }\r\n\r\n    this.applyStep(selectedStep, selectedUnit);\r\n\r\n    return true;\r\n  }\r\n\r\n  private applyStep(step: IStep, unit: Unit): void {\r\n    const { type, destination } = step;\r\n\r\n    unit.position = destination; // перемещаем юнита\r\n\r\n    const movedToUpgradeZone = this.table.isUpgradeZone(destination, unit.side);\r\n    if (movedToUpgradeZone) { // улучшаем юнита если добрался до зоны улучшения\r\n      unit.upgrade();\r\n    }\r\n\r\n    if (type === StepType.Attack) { // ход - атака\r\n      const { config, unitsController } = this;\r\n\r\n      step.affectedUnits.forEach(unit => { // удаляем убитых юнитов\r\n        unitsController.kill(unit.id);\r\n      });\r\n\r\n      const availableAttacks = this.findAttackSteps(unit);\r\n      const unitHasAvailableAttacks = availableAttacks.length > 0;\r\n      if (config.multipleAttacks && unitHasAvailableAttacks) {\r\n        this.lockedUnit = unit;\r\n      } else {\r\n        this.finishTurn();\r\n      }\r\n    }\r\n\r\n    if (type === StepType.Move) {\r\n      this.finishTurn();\r\n    }\r\n  }\r\n\r\n  private finishTurn(): void {\r\n    const { turnOf: currentSide } = this;\r\n\r\n    const nextSide = oppositeSides[currentSide];\r\n\r\n    this.lockedUnit = undefined;\r\n    this._turnOf = nextSide;\r\n\r\n    const nextSideUnits = this.unitsController.list(nextSide);\r\n    const nextSideHasUnits = nextSideUnits.length > 0;\r\n\r\n    const nextSideStepsMap = this.findAvailableSteps(nextSide);\r\n    const nextSideHasAvailableSteps = Object.values(nextSideStepsMap).length > 0;\r\n\r\n    if (!nextSideHasUnits || !nextSideHasAvailableSteps) {\r\n      this._winnerSide = currentSide;\r\n    }\r\n  }\r\n\r\n  private findAttackSteps(unit: Unit): IStep.Attack[] {\r\n    const [x0, y0] = unit.position;\r\n\r\n    const attackSteps: IStep.Attack[] = [];\r\n\r\n    for (const direction of unit.attackDirections) {\r\n      const [xV, yV] = direction;\r\n\r\n      for (let i = 1; i <= unit.maxMoveDistance; i++) {\r\n        const x = x0 + xV * i;\r\n        const y = y0 + yV * i;\r\n\r\n        const currentPos = [x, y];\r\n        const nextPos = [x + xV, y + yV];\r\n\r\n        const currentPositionOutsideOfMap = this.table.isOutside(currentPos);\r\n        const nextPositionOutsideOfMap = this.table.isOutside(nextPos);\r\n        if (currentPositionOutsideOfMap || nextPositionOutsideOfMap) break;\r\n\r\n        const currentUnit = this.unitsController.unitOn(currentPos);\r\n\r\n        const positionIsEmpty = currentUnit === null;\r\n        if (positionIsEmpty) continue;\r\n\r\n        const metOwnUnit = currentUnit.side === unit.side;\r\n        if (metOwnUnit) break;\r\n\r\n        const nextUnit = this.unitsController.unitOn(nextPos);\r\n\r\n        const nextPositionIsEmpty = nextUnit === null;\r\n        if (nextPositionIsEmpty) {\r\n          attackSteps.push({\r\n            type: StepType.Attack,\r\n            from: unit.position,\r\n            destination: nextPos,\r\n            affectedUnits: [currentUnit],\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    return attackSteps;\r\n  }\r\n\r\n  private findMoveSteps(unit: Unit): IStep.Move[] {\r\n    const [x0, y0] = unit.position;\r\n\r\n    const moveSteps: IStep.Move[] = [];\r\n\r\n    for (const direction of unit.moveDirections) {\r\n      const [xV, yV] = direction;\r\n\r\n      for (let i = 1; i <= unit.maxMoveDistance; i++) {\r\n        const x = x0 + xV * i;\r\n        const y = y0 + yV * i;\r\n\r\n        const currentPos = [x, y];\r\n\r\n        const currentPositionOutsideOfMap = this.table.isOutside(currentPos);\r\n        if (currentPositionOutsideOfMap) break;\r\n\r\n        const currentUnit = this.unitsController.unitOn(currentPos);\r\n\r\n        const positionIsEmpty = currentUnit === null;\r\n        if (!positionIsEmpty) break;\r\n\r\n        moveSteps.push({\r\n          type: StepType.Move,\r\n          from: unit.position,\r\n          destination: currentPos,\r\n        });\r\n      }\r\n    }\r\n\r\n    return moveSteps;\r\n  }\r\n}\r\n","export * from './game';\r\nexport * from './tables';\r\n","import { GameSide, ITable, Position, TableType } from '#interfaces';\r\n\r\nexport class BasicTable implements ITable {\r\n  public readonly type = TableType.Basic;\r\n  public readonly height = 6;\r\n  public readonly width = 6;\r\n\r\n  public isOutside(pos: Position): boolean {\r\n    const { width, height } = this;\r\n    const [x, y] = pos;\r\n\r\n    return [\r\n      x < 0,\r\n      y < 0,\r\n      x > width - 1,\r\n      y > height - 1,\r\n    ].some(Boolean);\r\n  }\r\n\r\n  public isUpgradeZone(pos: Position, forSide: GameSide): boolean {\r\n    const { height } = this;\r\n    const [, y] = pos;\r\n    if (forSide === GameSide.Top) {\r\n      return y === height - 1;\r\n    }\r\n\r\n    if (forSide === GameSide.Bottom) {\r\n      return y === 0;\r\n    }\r\n\r\n    return false;\r\n  }\r\n}\r\n","import { ITable, TableType } from '#interfaces';\r\nimport { BasicTable } from './basic-table';\r\n\r\nexport const createTable = (tableType: TableType): ITable => {\r\n  if (tableType === TableType.Basic) {\r\n    return new BasicTable();\r\n  }\r\n\r\n  throw new Error(`createTable: Тип стола '${tableType}' не поддерживается`);\r\n}\r\n","import { directions } from '#constants';\r\nimport { Direction, GameSide, IUnit, Position, StepType, UnitType } from '#interfaces';\r\n\r\nexport class Unit implements IUnit {\r\n  public id: IUnit['id'];\r\n  public side: GameSide;\r\n  public type: UnitType;\r\n  public position: Position;\r\n\r\n  constructor(data: IUnit) {\r\n    const { id, side, type, position } = data;\r\n    this.id = id;\r\n    this.side = side;\r\n    this.type = type;\r\n    this.position = position;\r\n  }\r\n\r\n  public get maxMoveDistance(): number {\r\n    return maxMoveDistance[this.type];\r\n  }\r\n\r\n  public get moveDirections(): Direction[] {\r\n    const { side, type } = this;\r\n    return stepDirections[side][type][StepType.Move];\r\n  }\r\n\r\n  public get attackDirections(): Direction[] {\r\n    const { side, type } = this;\r\n    return stepDirections[side][type][StepType.Attack];\r\n  }\r\n\r\n  public upgrade() {\r\n    if (this.type === UnitType.Basic) {\r\n      this.type = UnitType.Special;\r\n    }\r\n  }\r\n\r\n  public cut(): IUnit {\r\n    const { id, side, type, position } = this;\r\n\r\n    return {\r\n      id,\r\n      side,\r\n      type,\r\n      position\r\n    };\r\n  }\r\n}\r\n\r\nconst maxMoveDistance: Record<UnitType, number> = {\r\n  [UnitType.Basic]: 1,\r\n  [UnitType.Special]: Infinity,\r\n};\r\n\r\ntype Directions = Record<\r\n  GameSide,\r\n  Record<\r\n    UnitType,\r\n    Record<StepType, Direction[]>\r\n  >\r\n>;\r\n\r\nconst stepDirections: Directions = {\r\n  [GameSide.Bottom]: {\r\n    [UnitType.Basic]: {\r\n      [StepType.Move]: [\r\n        directions.top,\r\n        directions.topLeft,\r\n        directions.topRight,\r\n      ],\r\n      [StepType.Attack]: directions.diagonalArr,\r\n    },\r\n    [UnitType.Special]: {\r\n      [StepType.Move]: [\r\n        directions.top,\r\n        directions.bottom,\r\n        ...directions.diagonalArr,\r\n      ],\r\n      [StepType.Attack]: directions.diagonalArr,\r\n    },\r\n  },\r\n  [GameSide.Top]: {\r\n    [UnitType.Basic]: {\r\n      [StepType.Move]: [\r\n        directions.bottom,\r\n        directions.bottomLeft,\r\n        directions.bottomRight,\r\n      ],\r\n      [StepType.Attack]: directions.diagonalArr,\r\n    },\r\n    [UnitType.Special]: {\r\n      [StepType.Move]: [\r\n        directions.top,\r\n        directions.bottom,\r\n        ...directions.diagonalArr,\r\n      ],\r\n      [StepType.Attack]: directions.diagonalArr,\r\n    },\r\n  },\r\n};\r\n","import { GameSide, IUnit, Position } from '#interfaces';\r\nimport { ObjectSet } from '#utils';\r\nimport { Unit } from './unit';\r\n\r\nexport class UnitsController {\r\n  private units: ObjectSet<Unit>;\r\n\r\n  constructor(units: IUnit[]) {\r\n    this.units = new ObjectSet<Unit>(\r\n      units.map(unit => new Unit(unit))\r\n    );\r\n  }\r\n\r\n  public unitOn(position: Position): Unit | null {\r\n    const [x0, y0] = position;\r\n\r\n    const unit = this.units.elements.find((unit) => {\r\n      const [x, y] = unit.position;\r\n      return x0 === x && y0 === y;\r\n    });\r\n\r\n    return unit ?? null;\r\n  }\r\n\r\n  public kill(id: string): Unit | null {\r\n    const removedUnit = this.units.remove(id);\r\n    return removedUnit;\r\n  }\r\n\r\n  public list(side?: GameSide): Unit[] {\r\n    const { elements: unitsList } = this.units;\r\n\r\n    if (side !== undefined) {\r\n      return unitsList.filter(unit => unit.side === side);\r\n    }\r\n\r\n    return unitsList;\r\n  }\r\n}\r\n","import { TableType } from './table';\r\nimport { IUnit } from './unit';\r\n\r\nexport enum GameSide {\r\n  Top = 'top',\r\n  Bottom = 'bottom',\r\n}\r\n\r\nexport interface IGameConfig {\r\n  tableType: TableType,\r\n  mustBeat: boolean,\r\n  multipleAttacks: boolean,\r\n}\r\n\r\nexport interface IGameSnapshot {\r\n  config: IGameConfig,\r\n  turnOf: GameSide,\r\n  units: IUnit[],\r\n  lockedUnit?: IUnit,\r\n}\r\n","export type ObjectWithId = {\r\n  id: string,\r\n  [key: string]: any,\r\n};\r\n\r\n/** [x, y] */\r\nexport type Position = number[];\r\n\r\n/**\r\n * Вектор, обозначающий направление. Примеры:\r\n * [-1, -1] - влево вниз\r\n * [1, 0] - вправо\r\n * [0, 1] - вверх\r\n */\r\nexport type Direction = number[];\r\n\r\nexport interface IMove {\r\n  from: Position,\r\n  to: Position,\r\n}\r\n","export * from './messages';\r\nexport * from './game';\r\nexport * from './helpers';\r\nexport * from './room';\r\nexport * from './step';\r\nexport * from './table-grid';\r\nexport * from './table';\r\nexport * from './unit';\r\nexport * from './user';\r\n","import { IRoomFullInfo, IRoomShortInfo } from '#interfaces';\r\nimport { IMove } from '../helpers';\r\n\r\nexport enum ClientMessageType {\r\n  LogIn = 'LogIn',\r\n  CheckToken = 'CheckToken',\r\n  CreateRoom = 'CreateRoom',\r\n  GetRooms = 'GetRooms',\r\n  JoinRoom = 'JoinRoom',\r\n  LeaveRoom = 'LeaveRoom',\r\n  SwapPlayers = 'SwapPlayers',\r\n  MakeStep = 'MakeStep',\r\n}\r\n\r\nexport namespace IClientMessageData {\r\n  export interface LogIn {\r\n    name: string,\r\n  }\r\n\r\n  export interface CheckToken {\r\n    token: string,\r\n  }\r\n\r\n  export interface CreateRoom {\r\n    title: string,\r\n    password?: string,\r\n  }\r\n\r\n  export interface GetRooms {\r\n\r\n  }\r\n\r\n  export interface JoinRoom {\r\n    roomId: string,\r\n    password?: string,\r\n  }\r\n\r\n  export interface LeaveRoom {\r\n    roomId: string,\r\n  }\r\n\r\n  export interface SwapPlayers {\r\n    roomId: string,\r\n  }\r\n\r\n  export interface MakeStep {\r\n    roomId: string,\r\n    move: IMove;\r\n  }\r\n}\r\n\r\nexport type IClientMessageDataMap = {\r\n  [ClientMessageType.LogIn]: IClientMessageData.LogIn,\r\n  [ClientMessageType.CheckToken]: IClientMessageData.CheckToken,\r\n  [ClientMessageType.CreateRoom]: IClientMessageData.CreateRoom,\r\n  [ClientMessageType.GetRooms]: IClientMessageData.GetRooms,\r\n  [ClientMessageType.JoinRoom]: IClientMessageData.JoinRoom,\r\n  [ClientMessageType.LeaveRoom]: IClientMessageData.LeaveRoom,\r\n  [ClientMessageType.SwapPlayers]: IClientMessageData.SwapPlayers,\r\n  [ClientMessageType.MakeStep]: IClientMessageData.MakeStep,\r\n};\r\n\r\nexport type IClientMessage<T extends ClientMessageType = ClientMessageType> = {\r\n  type: T,\r\n  data: IClientMessageDataMap[T];\r\n};\r\n\r\nexport namespace IServerResponse {\r\n  export interface LogIn {\r\n    id: string,\r\n    token: string,\r\n    name: string,\r\n  }\r\n\r\n  export type CheckToken = {\r\n    valid: false,\r\n  } | {\r\n    valid: true,\r\n    id: string,\r\n    name: string,\r\n    activeRoom?: IRoomFullInfo,\r\n  };\r\n\r\n  export interface CreateRoom {\r\n    roomInfo: IRoomFullInfo,\r\n  }\r\n\r\n  export interface GetRooms {\r\n    rooms: IRoomShortInfo[],\r\n  }\r\n\r\n  export type JoinRoom = {\r\n    joined: false,\r\n    reason: string,\r\n  } | {\r\n    joined: true,\r\n    roomInfo: IRoomFullInfo,\r\n  };\r\n\r\n  export type LeaveRoom = {\r\n    leaved: boolean,\r\n  };\r\n\r\n  export interface SwapPlayers {\r\n    swapped: boolean,\r\n  }\r\n\r\n  export interface MakeStep {\r\n    success: boolean,\r\n  }\r\n}\r\n\r\nexport type IServerResponseMap = {\r\n  [ClientMessageType.LogIn]: IServerResponse.LogIn,\r\n  [ClientMessageType.CheckToken]: IServerResponse.CheckToken;\r\n  [ClientMessageType.CreateRoom]: IServerResponse.CreateRoom,\r\n  [ClientMessageType.GetRooms]: IServerResponse.GetRooms,\r\n  [ClientMessageType.JoinRoom]: IServerResponse.JoinRoom,\r\n  [ClientMessageType.LeaveRoom]: IServerResponse.LeaveRoom,\r\n  [ClientMessageType.SwapPlayers]: IServerResponse.SwapPlayers,\r\n  [ClientMessageType.MakeStep]: IServerResponse.MakeStep,\r\n};\r\n\r\nexport type IServerResponse = IServerResponseMap[keyof IServerResponseMap];\r\n","import { IUser } from '../user';\r\nimport { IRoomFullInfo } from '../room';\r\n\r\nexport enum ServerMessageType {\r\n  UserData = 'userData',\r\n  RoomData = 'roomData',\r\n  GameOver = 'gameOver',\r\n  RoomDeleted = 'roomDeleted',\r\n}\r\n\r\nexport namespace IServerMessageData {\r\n  export interface UserData {\r\n    userData: IUser,\r\n  }\r\n\r\n  export interface RoomData {\r\n    roomFullInfo: IRoomFullInfo,\r\n  }\r\n\r\n  export interface GameOver {\r\n    winner: IUser,\r\n    roomId: string,\r\n  }\r\n\r\n  export interface RoomDeleted {\r\n    roomId: string,\r\n  }\r\n}\r\n\r\nexport type IServerMessageDataMap = {\r\n  [ServerMessageType.UserData]: IServerMessageData.UserData,\r\n  [ServerMessageType.RoomData]: IServerMessageData.RoomData,\r\n  [ServerMessageType.GameOver]: IServerMessageData.GameOver,\r\n  [ServerMessageType.RoomDeleted]: IServerMessageData.RoomDeleted,\r\n};\r\n\r\ntype IServerMessageMap = { [T in ServerMessageType]: { type: T, data: IServerMessageDataMap[T]; } };\r\n\r\nexport type IServerMessage = IServerMessageMap[keyof IServerMessageMap];\r\n","export * from './client-server';\r\nexport * from './from-server';\r\n","import { GameSide, IGameSnapshot } from './game';\r\nimport { IUser } from './user';\r\n\r\nexport type IActors = Record<GameSide, IUser | null>;\r\n\r\nexport interface IRoomBaseInfo {\r\n  id: string,\r\n  title: string,\r\n  isSecured: boolean,\r\n}\r\n\r\nexport interface IRoomShortInfo extends IRoomBaseInfo {\r\n  playersCount: number,\r\n}\r\n\r\nexport interface IRoomFullInfo extends IRoomBaseInfo {\r\n  creatorId: string,\r\n  actors: IActors,\r\n  gameSnapshot: IGameSnapshot,\r\n}\r\n","import { Position } from './helpers';\r\nimport { IUnit } from './unit';\r\n\r\nexport enum StepType {\r\n  Move = 'move',\r\n  Attack = 'attack',\r\n}\r\n\r\nexport type IStep =\r\n  | IStep.Move\r\n  | IStep.Attack;\r\n\r\nexport namespace IStep {\r\n  export interface Info {\r\n    from: Position,\r\n    destination: Position,\r\n  }\r\n\r\n  export interface Move extends Info {\r\n    type: StepType.Move,\r\n  }\r\n\r\n  export interface Attack extends Info {\r\n    type: StepType.Attack,\r\n    affectedUnits: IUnit[],\r\n  }\r\n}\r\n\r\nexport type IAllowedStepsMap = Record<IUnit['id'], IStep[]>;\r\n","import { IUnit } from './unit';\r\n\r\nexport enum CellType {\r\n  Void = 'void',\r\n  Basic = 'basic',\r\n}\r\n\r\nexport type IGridElem = {\r\n  cellType: CellType,\r\n  unit: IUnit | null,\r\n};\r\n\r\n/**\r\n * y - вниз\r\n * x - вправо\r\n *\r\n * обращаться: grid[x][y]\r\n */\r\nexport type ITableGrid = IGridElem[][];\r\n","import { GameSide } from './game';\r\nimport { Position } from './helpers';\r\n\r\nexport enum TableType {\r\n  Basic = 'basic',\r\n  Another = 'another',\r\n}\r\n\r\nexport interface ITable {\r\n  readonly type: TableType,\r\n  readonly width: number,\r\n  readonly height: number,\r\n  isOutside(pos: Position): boolean,\r\n  isUpgradeZone(pos: Position, forSide: GameSide): boolean,\r\n}\r\n","import { GameSide } from './game';\r\nimport { Position } from './helpers';\r\n\r\nexport enum UnitType {\r\n  Basic = 'basic',\r\n  Special = 'special',\r\n}\r\n\r\nexport interface IUnit {\r\n  id: string,\r\n  side: GameSide,\r\n  type: UnitType,\r\n  position: Position,\r\n}\r\n","export interface IUser {\r\n  id: string,\r\n  name: string,\r\n}\r\n","import { getUniqueString } from '#utils';\r\nimport { GameSide, ITable, IUnit, Position, UnitType } from '#interfaces';\r\n\r\nconst makeBasicUnit = (position: Position, side: GameSide): IUnit => {\r\n  return {\r\n    id: getUniqueString(),\r\n    side,\r\n    type: UnitType.Basic,\r\n    position,\r\n  };\r\n};\r\n\r\n// TODO: Разная генерация для разных карт\r\nexport const generateInitialUnits = (table: ITable): IUnit[] => {\r\n  const { width, height } = table;\r\n  const units: IUnit[] = [];\r\n\r\n  const rowsPerSide = 2;\r\n\r\n  // top units\r\n  for (let y = 0; y < rowsPerSide; y++) {\r\n    for (let x = y % 2; x < width; x += 2) {\r\n      const newUnit = makeBasicUnit([x, y], GameSide.Top);\r\n      units.push(newUnit);\r\n    }\r\n  }\r\n\r\n  // bottom units\r\n  for (let padY = 0; padY < rowsPerSide; padY++) {\r\n    const y = height - padY - 1;\r\n    for (let x = y % 2; x < width; x += 2) {\r\n      const newUnit = makeBasicUnit([x, y], GameSide.Bottom);\r\n      units.push(newUnit);\r\n    }\r\n  }\r\n\r\n  return units;\r\n};\r\n","export const getUniqueString = (): string => {\r\n  return Math.random().toString(16).slice(2) + (new Date()).getTime() + Math.random().toString(16).slice(2);\r\n};\r\n","export * from './get-unique-string';\r\nexport * from './log-error';\r\nexport * from './object-set';\r\nexport * from './position-utils';\r\nexport * from './generate-initial-units';\r\n","export const logError = (text: string, err: unknown) => {\r\n  let errInfo = err;\r\n\r\n  if (err instanceof Error) {\r\n    errInfo = err.message;\r\n  }\r\n\r\n  console.error(text, errInfo);\r\n};\r\n","import { ObjectWithId } from '#interfaces';\r\n\r\n/* Как Set, только для работы с объектами по id */\r\n\r\nexport class ReadonlyObjectSet<T extends ObjectWithId> {\r\n  protected _elements: T[];\r\n  public get elements() { return this._elements.slice(); }\r\n\r\n  constructor(initialElements: T[]) {\r\n    const elementsMap = initialElements.reduce((acc, curr) => {\r\n      acc[curr.id] = curr;\r\n\r\n      return acc;\r\n    }, {} as Record<string, T>);\r\n    const uniqueElements = Object.values(elementsMap);\r\n\r\n    this._elements = uniqueElements;\r\n  }\r\n\r\n  public get length() { return this._elements.length; }\r\n\r\n  public find(id: string): T | undefined {\r\n    return this._elements.find(element => element.id === id);\r\n  }\r\n\r\n  public has(id: string): boolean {\r\n    return !!this.find(id);\r\n  }\r\n}\r\n\r\nexport class ObjectSet<T extends ObjectWithId> extends ReadonlyObjectSet<T> {\r\n  /**\r\n   * Если элемент с таким id уже есть, ничего не произойдёт\r\n   */\r\n  public insert(obj: T): boolean {\r\n    const alreadyExists = this.has(obj.id);\r\n    if (alreadyExists) {\r\n      return false;\r\n    }\r\n\r\n    this._elements.push(obj);\r\n\r\n    return true;\r\n  }\r\n\r\n  public remove(id: string): T | null {\r\n    const element = this.find(id);\r\n\r\n    if (!element) {\r\n      return null;\r\n    }\r\n\r\n    const elementIndex = this._elements.indexOf(element);\r\n\r\n    const [removedElement] = this._elements.splice(elementIndex, 1);\r\n\r\n    return removedElement;\r\n  }\r\n}\r\n","import { Position } from '#interfaces';\r\n\r\nexport const samePos = (pos1: Position, pos2: Position) => {\r\n  return pos1[0] === pos2[0] && pos1[1] === pos2[1];\r\n};\r\n","module.exports = require(\"cors\");","module.exports = require(\"express\");","module.exports = require(\"joi\");","module.exports = require(\"ws\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","import ws from 'ws';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\n\r\nimport { logError } from '#utils';\r\n\r\nimport { WebsocketCommunicator } from './services';\r\nimport { RoomsManager, UsersManager } from './entities';\r\nimport { handleMessage } from './app';\r\nimport { ServerMessageType } from '../shared/interfaces/messages';\r\n\r\nconst httpServer = express();\r\nhttpServer.use(express.json());\r\nhttpServer.use(cors());\r\n\r\nhttpServer.post('/game', async (req, res) => {\r\n  const token = req.headers['authorization'];\r\n\r\n  const result = await handleMessage(req.body, token);\r\n\r\n  if (typeof result === 'object') {\r\n    res.status(200).send(JSON.stringify(result));\r\n  } else {\r\n    res.sendStatus(result);\r\n  }\r\n});\r\n\r\nhttpServer.listen(7000);\r\n\r\nconst wsServer = new ws.Server({\r\n  port: 7001,\r\n});\r\n\r\nconst removeRoomTimeouts: Record<string, NodeJS.Timeout> = {};\r\n\r\nwsServer.on('connection', async (socket, req) => {\r\n  try {\r\n    const reqUrl = new URL(req.url!, `http://${req.headers.host}`);\r\n\r\n    const token = reqUrl.searchParams.get('token');\r\n\r\n    if (!token) {\r\n      console.log('no token', req.url);\r\n      socket.terminate();\r\n      return;\r\n    }\r\n\r\n    const user = UsersManager.find(token);\r\n\r\n    if (!user) {\r\n      console.log('no user', token);\r\n      socket.terminate();\r\n      return;\r\n    }\r\n\r\n    // Если пользователь является создателем комнаты, при его отключении\r\n    // запускаем таймер удаления комнаты. При переподключении удаляем таймер.\r\n    clearTimeout(removeRoomTimeouts[user.id]);\r\n    socket.onclose = () => {\r\n      const roomWithUser = RoomsManager.findRoomWithUser(user.id);\r\n\r\n      if (roomWithUser?.creator.id === user.id) {\r\n        removeRoomTimeouts[user.id] = setTimeout(() => {\r\n          RoomsManager.removeRoomWithNotify(roomWithUser.id);\r\n        }, 30 * 1000);\r\n      }\r\n    };\r\n\r\n    const communicator = new WebsocketCommunicator({\r\n      socket,\r\n      receiverId: user.id,\r\n    });\r\n    user.changeCommunicator(communicator);\r\n\r\n    await user.sendMessage({\r\n      type: ServerMessageType.UserData,\r\n      data: {\r\n        userData: user.serialize(),\r\n      },\r\n    });\r\n  } catch (err) {\r\n    logError('error wsServer on connection', err);\r\n  }\r\n});\r\n"],"names":[],"sourceRoot":""}